name: Deploy to Dev

on:
  push:
    branches:
      - feature-github-actions
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to dev
    runs-on: [self-hosted]
    environment: dev
    env:
      APP_REPOSITORY_DIR: ~/TestServer/facturatie

    steps:
      - name: Configure SSH
        run: |
          eval $(ssh-agent)
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/private_key
          chmod 600 ~/private_key
          ssh-add ~/private_key
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Check if latest image exists
        id: check_latest_image
        run: |
          ssh -v -o StrictHostKeyChecking=no -o IdentityFile=~/private_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'ENDSSH'
          if docker image inspect facturatie-facturatie:latest &> /dev/null; then
            echo '::set-output name=image_exists::true'
          else
            echo '::set-output name=image_exists::false'
          fi
          ENDSSH

      - name: Backup previous state
        if: steps.check_latest_image.outputs.image_exists == 'true'
        run: |
          ssh -v -o StrictHostKeyChecking=no -o IdentityFile=~/private_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'ENDSSH'
          cd ${{ env.APP_REPOSITORY_DIR }}
          docker tag facturatie-facturatie:latest facturatie-facturatie:backup
          ENDSSH

      - name: Deploy new version
        run: |
          ssh -v -o StrictHostKeyChecking=no -o IdentityFile=~/private_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'ENDSSH'
          eval $(ssh-agent)
          ssh-add ~/.ssh/github_intratechconsulting
          cd ${{ env.APP_REPOSITORY_DIR }}
          docker compose down
          git checkout dev
          git pull
          echo -e "
          RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS=${{ secrets.RABBITMQ_PASS }}
          API_KEY=${{ secrets.API_KEY }}
          API_URL=${{ secrets.API_URL }}
          HASH_KEY=${{ secrets.HASH_KEY }}
          " > .env
          docker compose up --build -d
          ENDSSH

      - name: Check deployment status
        id: check_status
        run: |
          ssh -v -o StrictHostKeyChecking=no -o IdentityFile=~/private_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'ENDSSH'
          cd ${{ env.APP_REPOSITORY_DIR }}
          docker compose ps | grep facturatie-facturatie
          ENDSSH

      - name: Rollback on failure
        if: steps.check_status.outcome != 'success'
        run: |
          ssh -v -o StrictHostKeyChecking=no -o IdentityFile=~/private_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'ENDSSH'
          cd ${{ env.APP_REPOSITORY_DIR }}
          docker-compose down
          docker run -d --name restored_container facturatie-facturatie:backup
          docker compose up -d
          ENDSSH
